name: .NET Build, Package, Release, and Publish

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name (e.g., v1.0.0)'
        required: true
      release_notes:
        description: 'Release notes'
        required: true
      nuget_release:
        description: 'Release on nuget.org (y/n)'
        required: true

permissions:
  contents: write
  

jobs:
  build-release-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build ./NumeriCall/ --configuration Release /p:DebugType=None /p:DebugSymbols=false

    - name: Pack project
      run: dotnet pack ./NumeriCall/ --configuration Release --output ./artifacts

    - name: Check Artifact
      run: ls -la ./artifacts

    - name: Check if release exists
      id: check_release
      run: |
        if gh release view ${{ github.event.inputs.tag_name }} &>/dev/null; then
          echo "exists=true" >> "$GITHUB_OUTPUT"
        else
          echo "exists=false" >> "$GITHUB_OUTPUT"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create GitHub Release
      run: |
          if [ "${{ steps.check_release.outputs.exists }}" = "true" ]; then
            echo "Updating existing release..."
            gh release edit "${{ github.event.inputs.tag_name }}" --notes "${{ github.event.inputs.release_notes }}"
          else
            echo "Creating new release..."
            gh release create "${{ github.event.inputs.tag_name }}" --notes "${{ github.event.inputs.release_notes }}"
          fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



    - name: Delete existing .nupkg asset if it exists
      run: |
        if [ "${{ steps.check_release.outputs.exists }}" = "true" ]; then
          for file in ./artifacts/*.nupkg; do
            name=$(basename "$file")
            if gh release view "${{ github.event.inputs.tag_name }}" --json assets | grep -q "$name"; then
              echo "Deleting existing asset: $name"
              gh release delete-asset "${{ github.event.inputs.tag_name }}" "$name" --yes
            fi
          done
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to release using GitHub CLI
      run: gh release upload "${{ github.event.inputs.tag_name }}" ./artifacts/*.nupkg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # - name: Publish to GitHub Packages
    #   run: dotnet nuget push ./artifacts/*.nupkg --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --api-key ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to release using GitHub CLI
      run: |
        if [ "${{ github.event.inputs.nuget_release }}" = "y" ]; then
          dotnet nuget push ./artifacts/*.nupkg --source "https://api.nuget.org/v3/index.json" --api-key ${{ secrets.NUGET_API_KEY }}
        fi
